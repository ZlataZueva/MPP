using System;
using System.Collections.Generic;
using System.Threading;

namespace _Lab1
{
    class Program
    {
        public delegate void TaskDelegate();

        public class TaskQueue: IDisposable
        {

            Thread[] ThreadsPool;
            int ThreadsNum = 0;
            object lockobj = new object();

            Queue<TaskDelegate> TaskDelegateQueue = new Queue<TaskDelegate>();

            public TaskQueue(int ThreadsNum)
            {
                ThreadsPool = new Thread[ThreadsNum];
                this.ThreadsNum = ThreadsNum;
                for (int n = 0; n < ThreadsNum; n++)
                {
                    ThreadsPool[n] = new Thread(CompletingTasks) {IsBackground = true};
                    ThreadsPool[n].Start();
                }
            }

            public void EnqueueTask(TaskDelegate task)
            {
                TaskDelegateQueue.Enqueue(task);
            }

            void CompletingTasks()
            {
                while (true)
                { 
                    if (TaskDelegateQueue.Count > 0)
                    {
                        lock (lockobj)
                        {
                            if (TaskDelegateQueue.Count > 0)
                            {
                                TaskDelegateQueue.Dequeue()?.Invoke();
                            }
                        }
                    }
                }
            }

            public void Dispose()
            {
                for (int n=0; n<ThreadsNum; n++)
                {
                    ThreadsPool[n].Interrupt();
                }
            }
        }

        private static int tasknum = 0;
        private static object obj = new object();

        private static void SomeTask ()
        {     
            lock (obj)
            {
                tasknum++;
            }
        }

    static void Main(string[] args)
        {
            using (TaskQueue q = new TaskQueue(3))
            {
                for (int i = 0; i < 1000; i++)
                {
                    q.EnqueueTask(SomeTask);
                }
                Console.WriteLine(tasknum);
                Console.ReadLine();
            }
        }
    }
}
