using System;
using System.Threading;

namespace Lab3
{
    class Program
    {
        public class Mutex
        {
            private int ID = -1; //-1 - unblocked, >0 - blocked

            public void Lock()
            {
                int currentID = Thread.CurrentThread.ManagedThreadId;
                while (Interlocked.CompareExchange(ref ID, currentID, -1) != -1)
                {
                    Thread.Sleep(10);
                }
            }

            public void Unlock()
            {
                int currentID = Thread.CurrentThread.ManagedThreadId;
                Interlocked.CompareExchange(ref ID, -1, currentID);
            }
        }

        private class IncDecThreads
        {
            private Thread incThr, decThr;
            private int n;

            public IncDecThreads (int n=3)
            {
                this.n = n;
                incThr = new Thread(Inc);
                decThr = new Thread(Dec);
                incThr.Start();
                decThr.Start();
            }

            private void Inc ()
            {
                for (int i = 0; i < n; i++)
                {
                    Console.WriteLine("Thread {0} is waiting for mutex...", Thread.CurrentThread.ManagedThreadId);
                    SharedResource.mtx.Lock();
                    Console.WriteLine("Thread {0} has accessed the variable", Thread.CurrentThread.ManagedThreadId);
                    SharedResource.Counter++;
                    Console.WriteLine("Thread {0} has changed the variable value to {1}", Thread.CurrentThread.ManagedThreadId, SharedResource.Counter);
                    SharedResource.mtx.Unlock();
                    Thread.Sleep(0);
                }
            }

            private void Dec()
            {
                for (int i = 0; i < n; i++)
                {
                    Console.WriteLine("Thread {0} is waiting for mutex...", Thread.CurrentThread.ManagedThreadId);
                    SharedResource.mtx.Lock();
                    Console.WriteLine("Thread {0} has accessed the variable", Thread.CurrentThread.ManagedThreadId);
                    SharedResource.Counter--;
                    Console.WriteLine("Thread {0} has changed the variable value to {1}", Thread.CurrentThread.ManagedThreadId, SharedResource.Counter);
                    SharedResource.mtx.Unlock();
                    Thread.Sleep(0);
                }
            }
        }

        private static class SharedResource
        {
            public static int Counter = 0;
            public static Mutex mtx = new Mutex();
        }
        
        static void Main(string[] args)
        {
            IncDecThreads threads = new IncDecThreads(10);
            Console.ReadLine();
        }
    }
}
