using System;
using System.Threading;
using System.Linq;
using System.IO;

namespace Lab5
{
    class Program
    {
        public delegate void TaskDelegate();

        private static class Parallel
        {
            static CountdownEvent countEvent;

            public static void WaitAll(TaskDelegate[] delegates_arr)
            {
                int tasks_num = delegates_arr.Count();
                countEvent = new CountdownEvent(tasks_num);
                foreach (TaskDelegate del in delegates_arr)
                {
                    ThreadPool.QueueUserWorkItem(WaitOne, del);
                }
                countEvent.Wait();
            }

            private static void WaitOne(object del)
            {
                (del as TaskDelegate).Invoke();
                countEvent.Signal();
            }
        }

        private static class DirectoryInfo
        {
            private static long totalSize;

            public static long FindSize(string dirName)
            {
                totalSize = 0;
                if (!Directory.Exists(dirName))
                {
                    return 0;
                }
                string[] files_names = Directory.GetFiles(dirName, "*.*", SearchOption.AllDirectories);
                int files_num = files_names.Count();
                TaskDelegate[] tasks_arr = new TaskDelegate[files_num];
                for (int i = 0; i < files_num; i++)
                {
                    string filename = files_names[i];
                    tasks_arr[i] = () => { AddFileSize(filename); };
                }
                Parallel.WaitAll(tasks_arr);
                return totalSize;
            }

            private static void AddFileSize(string fName)
            {
                if (!File.Exists(fName))
                    return;
                FileInfo fInfo = new FileInfo(fName);
                if (fInfo == null)
                    return;
                Console.WriteLine("+ {0}: {1} (Thread{2})", fInfo.Name, fInfo.Length, Thread.CurrentThread.ManagedThreadId);
                Interlocked.Exchange(ref totalSize, fInfo.Length+totalSize);
            }
        }

        static void Main(string[] args)
        {
            string dir = @"C:\Users\ZlatKa\Pictures";
            Console.WriteLine("Size of directory {0} = {1}", dir, DirectoryInfo.FindSize(dir));
            Console.WriteLine("Program finished");
            Console.ReadLine();
        }
    }
}
